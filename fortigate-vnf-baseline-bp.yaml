tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.5/types.yaml
  - plugin:cloudify-openstack-plugin?version= >=2.14.7 , <3
  - plugin:cloudify-utilities-plugin

inputs:

  fortigate_image_url:
    default: "https://s3-eu-west-1.amazonaws.com/cloudify-labs/images/FG562-DZ.img"

  flavor:
    description: >
      An Openstack Flavor ID.
    default: { get_secret: small_image_flavor }

  network_deployment_name:
    default: openstack-example-network

  network_blueprint_name:
    default: https://github.com/arikyakir/openstack-example-network/archive/master.zip
    description: path (relative or URL) of the network blueprint zip

  network_blueprint_main_yaml:
    default: simple-blueprint.yaml
    description: the main blueprint file to use

  use_existing_network_deployment:
    default: true
    description: wheather or not to connect to existing network or create new one from the provided blueprint info

dsl_definitions:

  openstack_config: &openstack_config
    username: { get_secret: keystone_username }
    password: { get_secret: keystone_password }
    tenant_name: { get_secret: keystone_tenant_name }
    auth_url: { get_secret: keystone_url }
    region: { get_secret: region }

node_templates:

  fortigate_vnf_baseline_config:
    type: cloudify.terminal.raw
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            terminal_auth: &terminal_auth
              store_logs: true
              user: admin
              password: ''
              ip: { get_attribute: [fortigate_vnf, ip] }
              promt_check:
                - '#'
                - '$'
              errors:
                - "Command fail."
            calls:
              - action: exit
        start:
          inputs:
            terminal_auth: *terminal_auth
            calls:
              - template: templates/fortigate-baseline.txt
    relationships:
      - type: cloudify.relationships.depends_on
        target: fortigate_vnf
      - type: cloudify.relationships.depends_on
        target: mgmt_port


  fortigate_vnf:
    type: cloudify.openstack.nodes.Server
    properties:
      openstack_config: *openstack_config
      agent_config:
        install_method: none
      server:
        key_name: ''
        image: "fortigate"
        flavor: { get_input: flavor }
      management_network_name: provider
    relationships:
    - type: cloudify.openstack.server_connected_to_port
      target: mgmt_port
    - type: cloudify.openstack.server_connected_to_port
      target: public_network_port
    - type: cloudify.openstack.server_connected_to_port
      target: private_network_port
    - type: cloudify.relationships.depends_on
      target: fortigate_image

#####################################################################################
#   This part is neccessary to connect public_network into lab router1 in order     #
#   to be able to assign floating ip to Fortinet public_network_port. FIP on        #
#   Fortinet is neccessary to nicely demo rules opened on FW. You can point browser #
#   directly from laptop to Fortinet FIP                                            #
#                                                                                   #
#                                                                                   #
#####################################################################################

  lab_router:
    type: cloudify.openstack.nodes.Router
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_attribute: [ openstack, deployment, outputs, public_network_router ] }
    relationships:
    - type: cloudify.relationships.contained_in
      target: openstack

  ip_2:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_secret: external_network_name }



######################################################################################
  mgmt_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: mgmt_network
    - type: cloudify.relationships.depends_on
      target: mgmt_subnet
    - type: cloudify.openstack.port_connected_to_security_group
      target: security_group
    - type: cloudify.openstack.port_connected_to_floating_ip
      target: ip

  public_network_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: Fortinet_public_network
    - type: cloudify.relationships.depends_on
      target: Fortinet_public_network_subnet
    - type: cloudify.openstack.port_connected_to_security_group
      target: security_group
    - type: cloudify.openstack.port_connected_to_floating_ip
      target: ip_2

  private_network_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: private_network
    - type: cloudify.relationships.depends_on
      target: private_network_subnet
    - type: cloudify.openstack.port_connected_to_security_group
      target: security_group



  fortigate_image:
    type: cloudify.openstack.nodes.Image
    properties:
      image:
        container_format: "bare"
        disk_format: "qcow2"
      openstack_config: *openstack_config
      image_url: {get_input : fortigate_image_url }
      use_external_resource: true
      create_if_missing: true
      resource_id: "fortigate"

  mgmt_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: provider_subnet
    relationships:
    - target: mgmt_network
      type: cloudify.relationships.contained_in


  mgmt_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: provider


  Fortinet_public_network_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: false
      resource_id: Fortinet_public_network_subnet
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              cidr: 10.10.10.0/24
              ip_version: 4
      cloudify.interfaces.validation:
        creation:
          inputs:
            args:
              cidr: 10.10.10.0/24
              ip_version: 4
    relationships:
    - target: Fortinet_public_network
      type: cloudify.relationships.contained_in
    - target: lab_router
      type: cloudify.relationships.depends_on
    - target: lab_router
      type: cloudify.openstack.subnet_connected_to_router



  Fortinet_public_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: false
      resource_id: Fortinet_public_network

  private_network_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_attribute: [ openstack, deployment, outputs, public_subnet ] }
    relationships:
    - target: private_network
      type: cloudify.relationships.contained_in

  private_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_attribute: [ openstack, deployment, outputs, public_network ] }
    relationships:
    - type: cloudify.relationships.contained_in
      target: openstack

  security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: fortinet_security_group
        description: generic security group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: "TCP"
        - remote_ip_prefix: 0.0.0.0/0
          protocol: "UDP"
        - remote_ip_prefix: 0.0.0.0/0
          protocol: "ICMP"
          port_range_min: 0
          port_range_max: 0

  ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_secret: external_network_name }

  openstack:
    type: cloudify.nodes.DeploymentProxy
    properties:
      resource_config:
        blueprint:
          id: { get_input: network_deployment_name }
          blueprint_archive: { get_input: network_blueprint_name }
          main_file_name: { get_input: network_blueprint_main_yaml }
          external_resource: { get_input: use_existing_network_deployment }
        deployment:
          id: { get_input: network_deployment_name }
          outputs:
            external_network: external_network
            public_network_router: public_network_router
            public_network: public_network
            private_network: private_network
            public_subnet: public_subnet
            private_subnet: private_subnet
          external_resource: { get_input: use_existing_network_deployment }
        reexecute: false

outputs:

  fortigate_vnf_mgmt_ip:
    value: { get_attribute: [fortigate_vnf, ip] }
